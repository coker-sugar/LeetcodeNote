贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最后得到的结果是全局最优的。

### 455. 分发饼干
已解答
简单
相关标签
相关企业
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
示例 1:

输入: g = [1,2,3], s = [1,1]
输出: 1
解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。

class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int child = 0,cookie = 0;
        while(child < g.length && cookie < s.length) {
            if(g[child] <= s[cookie]) child ++;
            cookie ++;
        }
        return child;
    }
}


### 135. 分发糖果
已解答
困难
相关标签
相关企业
n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。

你需要按照以下要求，给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。
相邻两个孩子评分更高的孩子会获得更多的糖果。
请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。

 

示例 1：

输入：ratings = [1,0,2]
输出：5
解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。
示例 2：

输入：ratings = [1,2,2]
输出：4
解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。

class Solution {
    public int candy(int[] ratings) {
        int len = ratings.length;
        int[] nums = new int[len];
        Arrays.fill(nums,1);
        for(int i = 1;i < len;i ++) {
            if(ratings[i] > ratings[i - 1]) {
                nums[i] = nums[i - 1] + 1;
            } 
        }
        int res = 0;
        for(int i = len - 1;i > 0;i --) {
            if(ratings[i] < ratings[i - 1]) {
                nums[i - 1] = Math.max(nums[i - 1],nums[i] + 1);
            }
            res += nums[i];
        }
        res += nums[0];
        return res;
    }
}

### 435. 无重叠区间
已解答
中等
相关标签
相关企业
给定一个区间的集合 intervals ，其中 intervals[i] = [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。

示例 1:

输入: intervals = [[1,2],[2,3],[3,4],[1,3]]
输出: 1
解释: 移除 [1,3] 后，剩下的区间没有重叠。
示例 2:

输入: intervals = [ [1,2], [1,2], [1,2] ]
输出: 2
解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
示例 3:

输入: intervals = [ [1,2], [2,3] ]
输出: 0
解释: 你不需要移除任何区间，因为它们已经是无重叠的了。

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length == 0) return 0;

        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] arr1,int[] arr2) {
                return arr1[1] - arr2[1];
            }
        });

        int total = 0,prev = intervals[0][1];
        for(int i = 1;i < intervals.length;i ++) {
            if(intervals[i][0] < prev) {
                total++;
            } else {
                prev = intervals[i][1];
            }
        }
        return total;
    }
}

### 605. 种花问题
已解答
简单
相关标签
相关企业
假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。

给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。
示例 1：
输入：flowerbed = [1,0,0,0,1], n = 1
输出：true

示例 2：
输入：flowerbed = [1,0,0,0,1], n = 2
输出：false

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        for(int i = 0;i < flowerbed.length;i ++) {
            if((i == 0 || flowerbed[i - 1] == 0 ) && flowerbed[i] == 0 &&  (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                n -- ;
                flowerbed[i] = 1;
            }
        }
        return n <= 0;
    }
}


代码
测试用例
测试用例
测试结果

### 452. 用最少数量的箭引爆气球
已解答
中等
相关标签
相关企业
有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 points ，其中points[i] = [xstart, xend] 表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。

一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。

给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。

 
示例 1：

输入：points = [[10,16],[2,8],[1,6],[7,12]]
输出：2
解释：气球可以用2支箭来爆破:
-在x = 6处射出箭，击破气球[2,8]和[1,6]。
-在x = 11处发射箭，击破气球[10,16]和[7,12]。


class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points,(arr1,arr2) -> Integer.compare(arr1[1],arr2[1]));
        int res = 0;
        for(int i = 0;i < points.length;i ++) {
            int maxRight = points[i][1];
            while(i < points.length && points[i][0] <= maxRight) {
                i ++;
            }
            res ++;
            i --;
        }
        return res;
    }
}
// 贪心策略： 找到右边的最大值，只要之后的左边值 <= 右边最大值，就都可以被一箭射中


 763. 划分字母区间
已解答
中等
相关标签
相关企业
提示
给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。

注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。

返回一个表示每个字符串片段的长度的列表。

 

### 示例 1：
输入：s = "ababcbacadefegdehijhklij"
输出：[9,7,8]
解释：
划分结果为 "ababcbaca"、"defegde"、"hijhklij" 。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 这样的划分是错误的，因为划分的片段数较少。 

class Solution {
    public List<Integer> partitionLabels(String s) {
        int len = s.length();
        int[] last = new int[26];
        for(int i = 0;i < len;i ++) {
            last[s.charAt(i) - 'a'] = i;
        }
        int start = 0,end = 0;
        List<Integer> list = new ArrayList<Integer>();
        for(int i = 0;i < len;i ++) {
            end = Math.max(end,last[s.charAt(i) - 'a']);
            if(end == i) {
                list.add(end - start + 1);
                start = end + 1;
            }
        }
        return list;
    }
}
// 贪心策略：在要分成的单独的一段字符串中，包含的字母 是 整个字符串中该字母的 所有！ ——> 也就是说找到某一字母的最后的索引，当这个字母的最后一个索引前面的其它字母也是最后索引的时候，这就可以分为一个字符串


122. 买卖股票的最佳时机 II
已解答
中等
相关标签
相关企业
给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

返回 你能获得的 最大 利润 。

 

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。

class Solution {
    public int maxProfit(int[] prices) {
        int res = 0;
        for(int i = 1;i < prices.length;i ++) {
            res += Math.max(0,prices[i] - prices[i - 1]);
        }
        return res;
    }
}
// 贪心策略：最少的时候买，最贵的时候卖 ——> 顺序序列时，第一位买入，最后一位卖出 ——> 最后一位 - 第一位 == 顺序逐个相加，在逆序的时候加上0即可





406. 根据身高重建队列
已解答
中等
相关标签
相关企业
提示
假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

示例 1：

输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
示例 2：

输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]


class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people,new Comparator<int[]>() {
            public int compare(int[] arr1,int[] arr2) {
                if(arr1[0] != arr2[0]) {
                    return arr2[0] - arr1[0];
                } else {
                    return arr1[1] - arr2[1];
                }
            }
        });
        List<int[]> list = new ArrayList<int[]>();
        for(int[] person : people) {
            list.add(person[1],person);
        }
        return list.toArray(new int[list.size()][]);
    }
}
// 贪心策略：前面看到的少的放前面 ->  先按照高个到矮个排列，如果一样高就按照第二位数排列 ——> 排列好之后，依次根据第二位数将数组放在指定位置


665. 非递减数列
已解答
中等
相关标签
相关企业
给你一个长度为 n 的整数数组 nums ，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。

我们是这样定义一个非递减数列的： 对于数组中任意的 i (0 <= i <= n-2)，总满足 nums[i] <= nums[i + 1]。

 

示例 1:

输入: nums = [4,2,3]
输出: true
解释: 你可以通过把第一个 4 变成 1 来使得它成为一个非递减数列。
示例 2:

输入: nums = [4,2,1]
输出: false
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。

class Solution {
    public boolean checkPossibility(int[] nums) {
        int count = 0;
        for(int i = 1;i < nums.length;i ++) {
            if(nums[i] < nums[i - 1]) {
                if(i == 1 || nums[i] >= nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
                if( ++ count > 1) return false;
            }
        }
        return true;
    }
}
// 策略：当出现逆序两次及以上，返回false，否则返回true -> 注意这里的变换，出现逆序的时候，要对已经逆序的数字进行修改，要么改大的逆序的数字，要么改小的为顺序的数字
