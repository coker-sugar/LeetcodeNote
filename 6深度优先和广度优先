深度优先:搜索一个新节点,对节点进行遍历: 要么用栈先进后出,要么用递归

回溯法：试探法，搜索到某一个节点，发现目前节点不是搜索目前，回退到原来的节点搜索，在目前节点处修改的状态要还原（和深度优先一样，知识多了个还原）

695. 岛屿的最大面积
已解答
中等
相关标签
相关企业
给你一个大小为 m x n 的二进制矩阵 grid 。

岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

岛屿的面积是岛上值为 1 的单元格的数目。


计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

示例 1：
输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
输出：6
解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。

class Solution {
    int xLen = 0,yLen = 0;
    public int maxAreaOfIsland(int[][] grid) {
        xLen = grid.length;
        yLen = grid[0].length;
        int max = 0;
        for(int i = 0;i < xLen;i ++) {
            for(int j = 0;j < yLen;j ++) {
                if(grid[i][j] == 1) {
                    max = Math.max(max,dfs(grid,i,j));
                } 
            }
        }
        return max;
    }
    public int dfs(int[][] grid,int i,int j) {
        if(i < 0 || j < 0 || i >= xLen || j >= yLen) return 0;
        if(grid[i][j] != 1) return 0;
        grid[i][j] = 2;
        return 1 + dfs(grid,i-1,j) + dfs(grid,i+1,j) + dfs(grid,i,j-1) + dfs(grid,i,j + 1);
    }
}


547. 省份数量
已解答
中等
相关标签
相关企业
有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。

省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。

给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。

返回矩阵中 省份 的数量。

 

示例 1：


输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
输出：2

class Solution {
    // HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    int[] visted;
    public int findCircleNum(int[][] isConnected) {
        int res = 0;
        visted = new int[isConnected.length];
        Arrays.fill(visted,0);
        for(int i = 0;i < isConnected.length;i ++) {
            if(visted[i] == 0) {
                visted[i] = 1;
                dfs(isConnected,i);
                res++;
            }
        }
        return res;
    }
    public void dfs(int[][] isConnected,int i) {
        for(int j = 0;j < isConnected[0].length;j ++) {
            if(isConnected[i][j] == 1 && visted[j] == 0) {    
                visted[j] = 1;
                dfs(isConnected,j);
            }
        }
    }
}



46. 全排列
已解答
中等
相关标签
相关企业
给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

 

示例 1：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
示例 2：

输入：nums = [0,1]
输出：[[0,1],[1,0]]
示例 3：

输入：nums = [1]
输出：[[1]]


class Solution {
    public List<List<Integer>> permute(int[] nums) {
         List<List<Integer>> ans =  new ArrayList<>();
         returnAns(nums,0,ans);
         return ans;
    }
    private void returnAns(int[] nums,int level,List<List<Integer>> ans) {
        if(level == nums.length - 1) {
            List<Integer> list = new ArrayList<>();
            for(int num : nums) list.add(num);
            ans.add(list);
            return ;
        }
        for(int i = level;i < nums.length;i ++) {
            swap(nums,level,i);
            returnAns(nums,level + 1,ans);
            swap(nums,level,i);
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


77. 组合
已解答
中等
相关标签
相关企业
给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。

你可以按 任何顺序 返回答案。

 

示例 1：

输入：n = 4, k = 2
输出：
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
示例 2：

输入：n = 1, k = 1
输出：[[1]]

  class Solution {
        List<List<Integer>> ans = new ArrayList<>();
        public List<List<Integer>> combine(int n, int k) {
            backtrack(n,k,new ArrayList<Integer>(),1);
            return ans;
        }
        private void backtrack(int n,int k,ArrayList<Integer> list,int p) {
            if(k == list.size()) {
                ans.add(new ArrayList<>(list));
                return ;
            }
            for(int i = p;i <= n;i ++) {
                list.add(i);
                backtrack(n,k,list,i + 1);
                list.remove(list.size() - 1);
            }
        }
    }

79. 单词搜索
已解答
中等
相关标签
相关企业
给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

 

示例 1：


输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：


输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
输出：true


class Solution {
    int height = 0;
    int width = 0;
    public boolean exist(char[][] board, String word) {
        height = board.length;
        width = board[0].length;
        boolean result = false;
        for(int i = 0;i < height;i ++) {
            for(int j = 0;j < width;j ++) {
                  result =  dfs(board,word,i,j,0);
                if(result) return result;
            }
        }
        return result;
    }
    private boolean dfs(char[][] board,String word,int i,int j,int index) {
        if(i < 0 || j < 0 || i >= height || j >= width) return false;
        if(word.charAt(index) != board[i][j]) return false;
        if(index == word.length() - 1) return true;
        board[i][j] = '\0';
        boolean res =  dfs(board,word,i - 1,j,index + 1) || dfs(board,word,i,j - 1,index + 1) || dfs(board,word,i + 1,j,index + 1) || dfs(board,word,i,j + 1,index + 1);
        board[i][j] = word.charAt(index); // 既然到了这一步，那么word.charAt(index)和 board[i][j] 必定相等
        return res;
    }
}


