深度优先:搜索一个新节点,对节点进行遍历: 要么用栈先进后出,要么用递归

695. 岛屿的最大面积
已解答
中等
相关标签
相关企业
给你一个大小为 m x n 的二进制矩阵 grid 。


岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

岛屿的面积是岛上值为 1 的单元格的数目。

计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。

示例 1：
输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
输出：6
解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。

class Solution {
    int xLen = 0,yLen = 0;
    public int maxAreaOfIsland(int[][] grid) {
        xLen = grid.length;
        yLen = grid[0].length;
        int max = 0;
        for(int i = 0;i < xLen;i ++) {
            for(int j = 0;j < yLen;j ++) {
                if(grid[i][j] == 1) {
                    max = Math.max(max,dfs(grid,i,j));
                } 
            }
        }
        return max;
    }
    public int dfs(int[][] grid,int i,int j) {
        if(i < 0 || j < 0 || i >= xLen || j >= yLen) return 0;
        if(grid[i][j] != 1) return 0;
        grid[i][j] = 2;
        return 1 + dfs(grid,i-1,j) + dfs(grid,i+1,j) + dfs(grid,i,j-1) + dfs(grid,i,j + 1);
    }
}


547. 省份数量
已解答
中等
相关标签
相关企业
有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。

省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。

给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。

返回矩阵中 省份 的数量。

 

示例 1：


输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
输出：2

class Solution {
    // HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    int[] visted;
    public int findCircleNum(int[][] isConnected) {
        int res = 0;
        visted = new int[isConnected.length];
        Arrays.fill(visted,0);
        for(int i = 0;i < isConnected.length;i ++) {
            if(visted[i] == 0) {
                visted[i] = 1;
                dfs(isConnected,i);
                res++;
            }
        }
        return res;
    }
    public void dfs(int[][] isConnected,int i) {
        for(int j = 0;j < isConnected[0].length;j ++) {
            if(isConnected[i][j] == 1 && visted[j] == 0) {    
                visted[j] = 1;
                dfs(isConnected,j);
            }
        }
    }
}


