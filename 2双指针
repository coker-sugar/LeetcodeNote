双指针：
- 遍历一个或者多个数组，两个指针指向不同的元素，协同完成任务
- 指向同一个数组，遍历方向相同且不会相交，称滑动窗口
- 指向同一个数组，遍历方向相反，可以用来进行搜索，带搜索的是排序好的

88. 合并两个有序数组
已解答
简单
相关标签
相关企业
提示
给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。

请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。

注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

示例 1：

输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
解释：需要合并 [1,2,3] 和 [2,5,6] 。
合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int l = m - 1,r = n - 1;
        int len = m + n - 1;
        int cur = 0;
        while(l >= 0 || r >= 0) {
            if(l == -1) {
                cur = nums2[r--];
            } else if(r == -1){
                cur = nums1[l--];
            } else if(nums1[l] <= nums2[r]) {
                cur = nums2[r--];
            } else {
                cur = nums1[l--];
            }
            nums1[len--] = cur;
        }
    }
}

// 双指针：逆序思维，左右分别做减法 ——> 找到临界点，什么时候左指针减，什么时候右指针减


142. 环形链表 II
已解答
中等
相关标签
相关企业
给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。

不允许修改 链表。

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。
示例 2：

输入：head = [1,2], pos = 0
输出：返回索引为 0 的链表节点
解释：链表中有一个环，其尾部连接到第一个节点。
示例 3：

输入：head = [1], pos = -1
输出：返回 null
解释：链表中没有环。

public class Solution {
    public ListNode detectCycle(ListNode head) {
    //  slow * 2 = fast 快指针走的是满指针的 两倍
    // slow = a + b 设慢指针走了循环之前的路长度a，以及循环之后的路长度b
    // fast = a + b + （c + b） 快指针走过慢指针的路，并且还追上了慢指针，c为一圈的步数
    // （a + b） * 2 = a + 2 * b + c
    // a = c 也就是循环之前的路长度a和一圈的长度相等
        ListNode fast = head, slow =  head;
        while(true) {
            if(fast == null || fast.next == null) return null;
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow) break;
        }
        fast = head;
        while(fast != slow) {
            fast = fast.next;
            slow = slow.next;
        }
        return fast;
    }
}

633. 平方数之和
中等
相关标签
相关企业
给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c 。

 

示例 1：

输入：c = 5
输出：true
解释：1 * 1 + 2 * 2 = 5
示例 2：

输入：c = 3
输出：false
class Solution {
    public boolean judgeSquareSum(int c) {
        long r =(long)Math.sqrt(c);
        long l = 0;
        while(l <= r) {
            long sum = l * l + r * r ;
            if(sum == c) {
                return true;
            } else if(sum > c) {
                r--;
            } else {
                l ++;
            }
        }
        return false;
    }
}

680. 验证回文串 II
已解答
简单
相关标签
相关企业
给你一个字符串 s，最多 可以从中删除一个字符。

请你判断 s 是否能成为回文字符串：如果能，返回 true ；否则，返回 false 。
示例 1：

输入：s = "aba"
输出：true
示例 2：

输入：s = "abca"
输出：true
解释：你可以删除字符 'c' 。

class Solution {
    public boolean validPalindrome(String s) {
        int l = 0,r = s.length() - 1;
        while(l < r) {
            if(s.charAt(l) != s.charAt(r)) {
                return validTwo(s,l + 1,r) || validTwo(s,l,r - 1);
            } 
            l++;
            r--;
        }
        return true;
    }
    public boolean validTwo(String s,int l,int r) {
        while(l < r) {
            if(s.charAt(l) != s.charAt(r)) {
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
// 只能删去一次，可能是左边也可能是右边 ——> 那就用一个或运算来决定，左右两边都进行测试一次 ——> 回文字符串，左边和右边同时进行比较

524. 通过删除字母匹配到字典里最长单词
已解答
中等
相关标签
相关企业
给你一个字符串 s 和一个字符串数组 dictionary ，找出并返回 dictionary 中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。

如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。

 

示例 1：

输入：s = "abpcplea", dictionary = ["ale","apple","monkey","plea"]
输出："apple"
示例 2：

输入：s = "abpcplea", dictionary = ["a","b","c"]
输出："a"

class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        String str = "";
        // 遍历数组
        for(String st : dictionary) {
            int l = 0,r = 0;
            while(l < s.length() && r < st.length()) {
                if(s.charAt(l) == st.charAt(r)) {
                    r ++;
                }
                l ++;
            }
            if(r == st.length()) {
                if(r > str.length() || (r == str.length() && st.compareTo(str) < 0)) {
                    str = st;
                }
            }
        }
        return str;
    }
}
